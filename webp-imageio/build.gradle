import org.jetbrains.kotlin.gradle.dsl.KotlinCompile

plugins {
    alias(libs.plugins.starter.library.kotlin)
    id("com.starter.publishing")
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

def targetJavaVersion = JavaVersion.VERSION_1_8
tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion.majorVersion.toInteger())
}
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = targetJavaVersion
}
tasks.withType(Javadoc).configureEach {
    options {
        addStringOption("Xdoclint:none", "-quiet")
    }
}

kotlin {
    jvmToolchain(17)
}

tasks.register("generateVersionProperties") {
    def projectVersion = version
    def propertiesFile = new File(sourceSets.main.output.resourcesDir, "version.properties")
    inputs.property("projectVersion", projectVersion)
    outputs.file(propertiesFile)

    doLast {
        propertiesFile.write """
            |webp_imageio_version = $projectVersion
            |
            """.strip().stripMargin()
    }
}

[8, 11, 17].forEach { majorVersion ->
    def jdkTest = tasks.register("testJdk$majorVersion", Test) {
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(majorVersion)
        }

        description = "Runs the test suite on JDK $majorVersion"
        group = LifecycleBasePlugin.VERIFICATION_GROUP

        // Copy inputs from normal Test task.
        def testTask = tasks.getByName("test")
        classpath = testTask.classpath
        testClassesDirs = testTask.testClassesDirs
    }
    tasks.named("check").configure { dependsOn(jdkTest) }
}

tasks.named("processResources") {
    dependsOn("generateVersionProperties")
}

dependencies {
    compileOnly(libs.androidx.annotations)
    testImplementation(libs.assertj.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testImplementation(libs.junit.jupiter.api)
}
