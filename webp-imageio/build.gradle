import org.jetbrains.kotlin.gradle.dsl.KotlinCompile

plugins {
    alias(libs.plugins.starter.library.kotlin)
    id("com.starter.publishing")
    alias(libs.plugins.kotlinx.binarycompatibility)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

def targetJavaVersion = JavaVersion.VERSION_1_8
tasks.withType(JavaCompile).configureEach {
    options.release.set(targetJavaVersion.majorVersion.toInteger())
    options.headerOutputDirectory.set(rootProject.file("libwebp-jni/src/main/c"))
}
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions.jvmTarget = targetJavaVersion
}
tasks.withType(Javadoc).configureEach {
    failOnError = false
    options {
        addStringOption("Xdoclint:none", "-quiet")
    }
}
kotlin {
    jvmToolchain(20)
    explicitApi()
}

tasks.register("generateVersionProperties", WriteProperties) { WriteProperties props ->
    props.destinationFile = new File(sourceSets.main.output.resourcesDir, "webp-imageio.properties")
    props.property("webp_imageio_version", version)
}

[8, 11, 17].forEach { majorVersion ->
    def jdkTest = tasks.register("testJdk$majorVersion", Test) {
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(majorVersion)
        }

        description = "Runs the test suite on JDK $majorVersion"
        group = LifecycleBasePlugin.VERIFICATION_GROUP

        // Copy inputs from normal Test task.
        def testTask = tasks.getByName("test")
        classpath = testTask.classpath
        testClassesDirs = testTask.testClassesDirs
    }
    tasks.named("check").configure { dependsOn(jdkTest) }
}

tasks.named("processResources") {
    dependsOn("generateVersionProperties")
}

dependencies {
    testImplementation(libs.assertj.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testImplementation(libs.junit.jupiter.api)
}
